{"version":3,"sources":["service/position.ts","service/storage.ts","model/seller.ts","service/server.ts","component/Map.tsx","component/SellerMarker.tsx","view/Map.tsx"],"names":["usePosition","callback","useState","position","setPosition","useEffect","navigator","geolocation","getCurrentPosition","current","coords","latitude","longitude","console","warn","useStoredState","key","defaultValue","value","result","window","localStorage","getItem","JSON","parse","err","state","setState","useCallback","changed","setItem","stringify","useSellers","sellers","setSellers","url","fetch","then","res","status","json","Error","statusText","catch","useStyles","makeStyles","root","top","right","bottom","left","CustomMap","children","onChangePosition","classes","zoom","setZoom","handleMoveEnd","event","center","target","getCenter","lat","lng","handleZoomEnd","getZoom","handleMoveEndDebounce","useDebounceCallback","handleZoomEndDebounce","Map","className","onMoveEnd","onZoomEnd","TileLayer","sellerIcon","L","Icon","iconAnchor","iconSize","iconUrl","SellerMarker","props","Marker","icon","seller","MapView","currentPosition","mapPosition","map","id"],"mappings":"wJAkBaA,EAAc,WAAqC,IAbtBC,EAaqB,EAC7BC,qBAD6B,mBACtDC,EADsD,KAC5CC,EAD4C,KAK7D,OAlBwCH,EAgBtBG,EAflBC,qBAAU,WACHC,UAAUC,YAKfD,UAAUC,YAAYC,oBAAmB,SAACC,GACxCR,EAAS,CAACQ,EAAQC,OAAOC,SAAUF,EAAQC,OAAOE,eALlDC,QAAQC,KAAK,kCAOd,CAACb,IAQGE,GCJIY,EAAiB,SAC5BC,EACAC,GAEA,IAAMC,EArBe,SAAYF,EAAaC,GAC9C,IAAME,EAASC,OAAOC,aAAaC,QAAQN,GAC3C,IAAKG,EACH,OAAOF,EAET,IACE,OAAOM,KAAKC,MAAML,GAClB,MAAOM,GAEP,OADAZ,QAAQC,KAAKW,GACNR,GAYKK,CAAQN,EAAKC,GAD+B,EAEhCf,mBAASgB,GAFuB,mBAEnDQ,EAFmD,KAE5CC,EAF4C,KAU1D,MAAO,CAACD,EAPSE,uBACf,SAACC,GACCF,EAASE,GAZQ,SAASb,EAAaE,GAC3CE,OAAOC,aAAaS,QAAQd,EAAKO,KAAKQ,UAAUb,IAY5CY,CAAQd,EAAKa,KAEf,CAACb,EAAKW,MCpBGK,EAAa,WAAkC,IAAD,EAC3B9B,qBAD2B,mBAClD+B,EADkD,KACzCC,EADyC,KASzD,OANA7B,qBAAU,WCbO,IAAS8B,KDcpB,wBCbCC,MAAMD,GAAKE,MAAK,SAACC,GACtB,GAAIA,EAAIC,QAAU,KAAOD,EAAIC,OAAS,IACpC,OAAOD,EAAIE,OAEb,MAAM,IAAIC,MAAMH,EAAII,gBDUjBL,KAAKH,GACLS,MAAM9B,QAAQC,QAChB,CAACoB,IAEGD,G,gCENHW,G,MAAYC,aAAW,iBAAO,CAClCC,KAAM,CACJ3C,SAAU,QACV4C,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,QAoCKC,EAhC4B,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,iBAAkBlD,EAAe,EAAfA,SAClEmD,EAAUV,IADuE,EAG/D1C,mBAAS,IAHsD,mBAGhFqD,EAHgF,KAG1EC,EAH0E,KAKjFC,EAAgB7B,uBACpB,SAAC8B,GACC,IAAMC,EAASD,EAAME,OAAOC,YAC5BR,EAAiB,CAACM,EAAOG,IAAKH,EAAOI,QAEvC,CAACV,IAGGW,EAAgBpC,uBAAY,SAAC8B,GAAD,OAAWF,EAAQE,EAAME,OAAOK,aAAY,CAACT,IAEzEU,EAAwBC,YAAoBV,EAAe,KAC3DW,EAAwBD,YAAoBH,EAAe,KAEjE,OACE,kBAACK,EAAA,EAAD,CACEC,UAAWhB,EAAQR,KACnBa,OAAQxD,EACRoE,UAAWL,EACXM,UAAWJ,EACXb,KAAMA,GAEN,kBAACkB,EAAA,EAAD,CAAWtC,IAAI,uDACdiB,I,yBCzCMsB,EAAa,IAAIC,IAAEC,KAAK,CACnCC,WAAY,CAAC,EAAG,GAChBC,SAAU,CAAC,GAAI,IACfC,QAAS,wBAOIC,EAJmC,SAASC,GACzD,OAAO,kBAACC,EAAA,EAAD,CAAQC,KAAMT,EAAYvE,SAAU8E,EAAMG,OAAOjF,YCS3CkF,UAhBW,WACxB,IAAMpD,EAAUD,IADmB,EAEHjB,EAA4B,YAFzB,mBAE5BZ,EAF4B,KAElBC,EAFkB,KAG7BkF,EAAkBtF,IAElBuF,EAAcpF,GAAYmF,GAAmB,CAAC,QAAS,KAE7D,OACE,kBAAC,EAAD,CAAWnF,SAAUoF,EAAalC,iBAAkBjD,GAApD,OACG6B,QADH,IACGA,OADH,EACGA,EAASuD,KAAI,SAACJ,GAAD,OACZ,kBAAC,EAAD,CAAcpE,IAAKoE,EAAOK,GAAIL,OAAQA","file":"static/js/4.a08c5601.chunk.js","sourcesContent":["import { LatLngTuple } from 'leaflet';\nimport { useEffect, useState } from 'react';\n\nexport type PositionCallback = (value: LatLngTuple) => any | undefined;\n\nexport const usePositionEffect = function(callback: PositionCallback) {\n  useEffect(() => {\n    if (!navigator.geolocation) {\n      console.warn('Geolocation is not supported');\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition((current) => {\n      callback([current.coords.latitude, current.coords.longitude]);\n    });\n  }, [callback]);\n};\n\nexport const usePosition = function(): LatLngTuple | undefined {\n  const [position, setPosition] = useState<LatLngTuple>();\n\n  usePositionEffect(setPosition);\n\n  return position;\n};\n","import { useCallback, useState } from 'react';\n\nexport const getItem = function<T>(key: string, defaultValue?: T): T | undefined {\n  const result = window.localStorage.getItem(key);\n  if (!result) {\n    return defaultValue;\n  }\n  try {\n    return JSON.parse(result) as T;\n  } catch (err) {\n    console.warn(err);\n    return defaultValue;\n  }\n};\n\nexport const setItem = function(key: string, value: any) {\n  window.localStorage.setItem(key, JSON.stringify(value));\n};\n\nexport const useStoredState = function<T>(\n  key: string,\n  defaultValue?: T,\n): [T | undefined, React.Dispatch<React.SetStateAction<T>>] {\n  const value = getItem(key, defaultValue);\n  const [state, setState] = useState(value);\n  const setValue = useCallback(\n    (changed) => {\n      setState(changed);\n      setItem(key, changed);\n    },\n    [key, setState],\n  );\n  return [state, setValue];\n};\n","import { LatLngTuple } from 'leaflet';\nimport { useState, useEffect } from 'react';\nimport { get } from '../service/server';\n\nexport type Seller = {\n  id: string;\n  name: string;\n  position: LatLngTuple;\n};\n\nexport const useSellers = function(): Seller[] | undefined {\n  const [sellers, setSellers] = useState();\n\n  useEffect(() => {\n    get('api/sellers/list.json')\n      .then(setSellers)\n      .catch(console.warn);\n  }, [setSellers]);\n\n  return sellers;\n};\n","export const get = function(url: string): Promise<any> {\n  return fetch(url).then((res) => {\n    if (res.status >= 200 && res.status < 400) {\n      return res.json();\n    }\n    throw new Error(res.statusText);\n  });\n};\n","import React, { useCallback, useState, ReactNode } from 'react';\nimport { useDebounceCallback } from '@react-hook/debounce';\nimport { LatLngTuple } from 'leaflet';\nimport { Map, TileLayer } from 'react-leaflet';\nimport { makeStyles } from '@material-ui/core/styles';\nimport 'leaflet/dist/leaflet.css';\n\nexport type CustomMapType = {\n  children?: ReactNode;\n  onChangePosition: (position: LatLngTuple) => any | undefined;\n  position: LatLngTuple;\n};\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    position: 'fixed',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n  },\n}));\n\nconst CustomMap: React.FC<CustomMapType> = ({ children, onChangePosition, position }) => {\n  const classes = useStyles();\n\n  const [zoom, setZoom] = useState(13);\n\n  const handleMoveEnd = useCallback(\n    (event) => {\n      const center = event.target.getCenter();\n      onChangePosition([center.lat, center.lng]);\n    },\n    [onChangePosition],\n  );\n\n  const handleZoomEnd = useCallback((event) => setZoom(event.target.getZoom()), [setZoom]);\n\n  const handleMoveEndDebounce = useDebounceCallback(handleMoveEnd, 250);\n  const handleZoomEndDebounce = useDebounceCallback(handleZoomEnd, 250);\n\n  return (\n    <Map\n      className={classes.root}\n      center={position}\n      onMoveEnd={handleMoveEndDebounce}\n      onZoomEnd={handleZoomEndDebounce}\n      zoom={zoom}\n    >\n      <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n      {children}\n    </Map>\n  );\n};\n\nexport default CustomMap;\n","import React from 'react';\nimport L from 'leaflet';\nimport { Marker } from 'react-leaflet';\nimport { Seller } from '../model/seller';\n\nexport type SellerMarkerProps = {\n  seller: Seller;\n};\n\nexport const sellerIcon = new L.Icon({\n  iconAnchor: [0, 0],\n  iconSize: [32, 32],\n  iconUrl: 'image/033-stall.svg',\n});\n\nconst SellerMarker: React.FC<SellerMarkerProps> = function(props) {\n  return <Marker icon={sellerIcon} position={props.seller.position} />;\n};\n\nexport default SellerMarker;\n","import React from 'react';\nimport { LatLngTuple } from 'leaflet';\n\nimport { usePosition } from '../service/position';\nimport { useStoredState } from '../service/storage';\nimport { useSellers } from '../model/seller';\nimport CustomMap from '../component/Map';\nimport SellerMarker from '../component/SellerMarker';\n\nconst MapView: React.FC = function() {\n  const sellers = useSellers();\n  const [position, setPosition] = useStoredState<LatLngTuple>('position');\n  const currentPosition = usePosition();\n\n  const mapPosition = position || currentPosition || [51.505, -0.09];\n\n  return (\n    <CustomMap position={mapPosition} onChangePosition={setPosition}>\n      {sellers?.map((seller) => (\n        <SellerMarker key={seller.id} seller={seller} />\n      ))}\n    </CustomMap>\n  );\n};\n\nexport default MapView;\n"],"sourceRoot":""}