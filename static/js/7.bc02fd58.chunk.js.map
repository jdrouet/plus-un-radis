{"version":3,"sources":["service/position.ts","service/storage.ts","service/server.ts","component/Map.tsx","component/EntityMarker.tsx","component/ProducerMarker.tsx","component/SellerMarker.tsx","view/Map.tsx","model/producer.ts","model/seller.ts"],"names":["usePosition","callback","useState","position","setPosition","useEffect","navigator","geolocation","getCurrentPosition","current","coords","latitude","longitude","console","warn","useStoredState","key","defaultValue","value","result","window","localStorage","getItem","JSON","parse","err","state","setState","useCallback","changed","setItem","stringify","get","url","fetch","then","res","status","json","Error","statusText","useStyles","makeStyles","root","top","right","bottom","left","CustomMap","children","onChangePosition","classes","zoom","setZoom","handleMoveEnd","event","center","target","getCenter","lat","lng","handleZoomEnd","getZoom","handleMoveEndDebounce","useDebounceCallback","handleZoomEndDebounce","Map","className","onMoveEnd","onZoomEnd","TileLayer","EntityMarker","props","onClick","handleClick","Marker","icon","producerIcon","L","Icon","iconAnchor","iconSize","iconUrl","ProducerMarker","sellerIcon","SellerMarker","EntityType","ProducerDialog","React","lazy","SellerDialog","useSelectedEntity","producers","sellers","matchProducers","useRouteMatch","matchSellers","find","item","id","params","type","Producer","Seller","MapView","currentPosition","mapPosition","setProducers","catch","useProducers","setSellers","useSellers","selected","handleSelectProducer","location","hash","handleSelectSeller","handleUnselect","Fragment","map","seller","producer","Suspense","fallback","onClose"],"mappings":"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","file":"static/js/7.bc02fd58.chunk.js","sourcesContent":["import { LatLngTuple } from 'leaflet';\nimport { useEffect, useState } from 'react';\n\nexport type PositionCallback = (value: LatLngTuple) => any | undefined;\n\nexport const usePositionEffect = function(callback: PositionCallback) {\n  useEffect(() => {\n    if (!navigator.geolocation) {\n      console.warn('Geolocation is not supported');\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition((current) => {\n      callback([current.coords.latitude, current.coords.longitude]);\n    });\n  }, [callback]);\n};\n\nexport const usePosition = function(): LatLngTuple | undefined {\n  const [position, setPosition] = useState<LatLngTuple>();\n\n  usePositionEffect(setPosition);\n\n  return position;\n};\n","import { useCallback, useState } from 'react';\n\nexport const getItem = function<T>(key: string, defaultValue?: T): T | undefined {\n  const result = window.localStorage.getItem(key);\n  if (!result) {\n    return defaultValue;\n  }\n  try {\n    return JSON.parse(result) as T;\n  } catch (err) {\n    console.warn(err);\n    return defaultValue;\n  }\n};\n\nexport const setItem = function(key: string, value: any) {\n  window.localStorage.setItem(key, JSON.stringify(value));\n};\n\nexport const useStoredState = function<T>(\n  key: string,\n  defaultValue?: T,\n): [T | undefined, React.Dispatch<React.SetStateAction<T>>] {\n  const value = getItem(key, defaultValue);\n  const [state, setState] = useState(value);\n  const setValue = useCallback(\n    (changed) => {\n      setState(changed);\n      setItem(key, changed);\n    },\n    [key, setState],\n  );\n  return [state, setValue];\n};\n","export const get = function(url: string): Promise<any> {\n  return fetch(url).then((res) => {\n    if (res.status >= 200 && res.status < 400) {\n      return res.json();\n    }\n    throw new Error(res.statusText);\n  });\n};\n","import React, { useCallback, useState, ReactNode } from 'react';\nimport { useDebounceCallback } from '@react-hook/debounce';\nimport { LatLngTuple } from 'leaflet';\nimport { Map, TileLayer } from 'react-leaflet';\nimport { makeStyles } from '@material-ui/core/styles';\nimport 'leaflet/dist/leaflet.css';\n\nexport type CustomMapType = {\n  children?: ReactNode;\n  onChangePosition: (position: LatLngTuple) => any | undefined;\n  position: LatLngTuple;\n};\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    position: 'fixed',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n  },\n}));\n\nconst CustomMap: React.FC<CustomMapType> = ({ children, onChangePosition, position }) => {\n  const classes = useStyles();\n\n  const [zoom, setZoom] = useState(13);\n\n  const handleMoveEnd = useCallback(\n    (event) => {\n      const center = event.target.getCenter();\n      onChangePosition([center.lat, center.lng]);\n    },\n    [onChangePosition],\n  );\n\n  const handleZoomEnd = useCallback((event) => setZoom(event.target.getZoom()), [setZoom]);\n\n  const handleMoveEndDebounce = useDebounceCallback(handleMoveEnd, 250);\n  const handleZoomEndDebounce = useDebounceCallback(handleZoomEnd, 250);\n\n  return (\n    <Map\n      className={classes.root}\n      center={position}\n      onMoveEnd={handleMoveEndDebounce}\n      onZoomEnd={handleZoomEndDebounce}\n      zoom={zoom}\n    >\n      <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n      {children}\n    </Map>\n  );\n};\n\nexport default CustomMap;\n","import React, { useCallback } from 'react';\nimport L from 'leaflet';\nimport { Marker } from 'react-leaflet';\nimport { Entity } from '../model/entity';\n\nexport type EntityMarkerProps<T extends Entity> = {\n  value: T;\n  onClick: (value: T) => any;\n};\n\nexport type EntityMarkerBaseProps<T extends Entity> = EntityMarkerProps<T> & {\n  icon: L.Icon;\n};\n\nconst EntityMarker = function<T extends Entity>(props: EntityMarkerBaseProps<T>) {\n  const { value, onClick } = props;\n  const handleClick = useCallback(() => onClick(value), [onClick, value]);\n  return <Marker icon={props.icon} position={value.position} onClick={handleClick} />;\n};\n\nexport default EntityMarker;\n","import React from 'react';\nimport L from 'leaflet';\nimport { Producer } from '../model/producer';\nimport EntityMarker, { EntityMarkerProps } from './EntityMarker';\n\nexport type ProducerMarkerProps = EntityMarkerProps<Producer>;\n\nexport const producerIcon = new L.Icon({\n  iconAnchor: [0, 0],\n  iconSize: [32, 32],\n  iconUrl: 'image/040-farmer.svg',\n});\n\nconst ProducerMarker: React.FC<ProducerMarkerProps> = function({ onClick, value }) {\n  return <EntityMarker icon={producerIcon} value={value} onClick={onClick} />;\n};\n\nexport default ProducerMarker;\n","import React from 'react';\nimport L from 'leaflet';\nimport { Seller } from '../model/seller';\nimport EntityMarker, { EntityMarkerProps } from './EntityMarker';\n\nexport type SellerMarkerProps = EntityMarkerProps<Seller>;\n\nexport const sellerIcon = new L.Icon({\n  iconAnchor: [0, 0],\n  iconSize: [32, 32],\n  iconUrl: 'image/033-stall.svg',\n});\n\nconst SellerMarker: React.FC<SellerMarkerProps> = function({ onClick, value }) {\n  return <EntityMarker icon={sellerIcon} onClick={onClick} value={value} />;\n};\n\nexport default SellerMarker;\n","import React from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { LatLngTuple } from 'leaflet';\n\nimport { usePosition } from '../service/position';\nimport { useStoredState } from '../service/storage';\nimport { useProducers, Producer } from '../model/producer';\nimport { useSellers, Seller } from '../model/seller';\nimport CustomMap from '../component/Map';\nimport ProducerMarker from '../component/ProducerMarker';\nimport SellerMarker from '../component/SellerMarker';\n\nconst ProducerDialog = React.lazy(() => import('../component/ProducerDialog'));\nconst SellerDialog = React.lazy(() => import('../component/SellerDialog'));\n\nenum EntityType {\n  Producer,\n  Seller,\n}\n\ntype EntityHolder = {\n  value: Seller | Producer;\n  type: EntityType;\n};\n\ntype EntityParams = {\n  id?: string;\n};\n\nexport const useSelectedEntity = function(\n  producers: Producer[] | undefined,\n  sellers: Seller[] | undefined,\n): EntityHolder | undefined {\n  const matchProducers = useRouteMatch<EntityParams>('/map/producers/:id');\n  const matchSellers = useRouteMatch<EntityParams>('/map/sellers/:id');\n  if (matchProducers) {\n    const value = producers?.find((item) => item.id === matchProducers.params.id) as Producer;\n    if (!value) return undefined;\n    return { value, type: EntityType.Producer };\n  }\n  if (matchSellers) {\n    const value = sellers?.find((item) => item.id === matchSellers.params.id) as Producer;\n    if (!value) return undefined;\n    return { value, type: EntityType.Seller };\n  }\n  return undefined;\n};\n\nconst MapView: React.FC = function() {\n  const [position, setPosition] = useStoredState<LatLngTuple>('position');\n  const currentPosition = usePosition();\n  const mapPosition = position || currentPosition || [51.505, -0.09];\n\n  const producers = useProducers();\n  const sellers = useSellers();\n  const selected = useSelectedEntity(producers, sellers);\n\n  const handleSelectProducer = (value: Producer) => {\n    window.location.hash = `/map/producers/${value.id}`;\n  };\n  const handleSelectSeller = (value: Seller) => {\n    window.location.hash = `/map/sellers/${value.id}`;\n  };\n  const handleUnselect = () => {\n    window.location.hash = `/map`;\n  };\n\n  return (\n    <React.Fragment>\n      <CustomMap position={mapPosition} onChangePosition={setPosition}>\n        {sellers?.map((seller) => (\n          <SellerMarker key={seller.id} value={seller} onClick={handleSelectSeller} />\n        ))}\n        {producers?.map((producer) => (\n          <ProducerMarker key={producer.id} value={producer} onClick={handleSelectProducer} />\n        ))}\n      </CustomMap>\n      <React.Suspense fallback={null}>\n        {selected?.type === EntityType.Seller ? (\n          <SellerDialog seller={selected.value} onClose={handleUnselect} />\n        ) : null}\n        {selected?.type === EntityType.Producer ? (\n          <ProducerDialog producer={selected.value} onClose={handleUnselect} />\n        ) : null}\n      </React.Suspense>\n    </React.Fragment>\n  );\n};\n\nexport default MapView;\n","import { useState, useEffect } from 'react';\nimport { get } from '../service/server';\nimport { Entity } from './entity';\n\nexport type Producer = Entity;\n\nexport const useProducers = function(): Producer[] | undefined {\n  const [producers, setProducers] = useState();\n\n  useEffect(() => {\n    get('api/producers/list.json')\n      .then(setProducers)\n      .catch(console.warn);\n  }, [setProducers]);\n\n  return producers;\n};\n","import { useState, useEffect } from 'react';\nimport { get } from '../service/server';\nimport { Entity } from './entity';\n\nexport type Seller = Entity;\n\nexport const useSellers = function(): Seller[] | undefined {\n  const [sellers, setSellers] = useState();\n\n  useEffect(() => {\n    get('api/sellers/list.json')\n      .then(setSellers)\n      .catch(console.warn);\n  }, [setSellers]);\n\n  return sellers;\n};\n"],"sourceRoot":""}